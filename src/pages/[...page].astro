---
import Layout from '../layouts/Layout.astro';
import { getCollection } from 'astro:content';

export async function getStaticPaths({ paginate }) {
  const allPosts = await getCollection('blog');
  const sortedPosts = allPosts.sort((a, b) => {
    return new Date(b.data.date).getTime() - new Date(a.data.date).getTime();
  });

  // Skip the first post (featured) and the first 6 posts (shown on page 1)
  const regularPosts = sortedPosts.slice(1);

  // Create paginated routes starting from page 2
  return paginate(regularPosts, {
    pageSize: 6,
    params: { page: 'page' },
    // Start from the second page, since the first is handled by index.astro
    start: 2
  });
}

// Get the data from Astro.props
const { page } = Astro.props;

// Generate page numbers without using JSX in the logic
function generatePaginationItems(currentPage, totalPages) {
  const items = [];
  
  // First page
  items.push({
    type: 'page',
    number: 1,
    url: '/',
    active: currentPage === 1
  });
  
  // Ellipsis after first page if needed
  if (currentPage > 3) {
    items.push({ type: 'ellipsis' });
  }
  
  // Pages around current page
  for (let i = Math.max(2, currentPage - 1); i <= Math.min(totalPages - 1, currentPage + 1); i++) {
    if (i !== 1 && i !== totalPages) {
      items.push({
        type: 'page',
        number: i,
        url: `/page/${i}`,
        active: currentPage === i
      });
    }
  }
  
  // Ellipsis before last page if needed
  if (currentPage < totalPages - 2) {
    items.push({ type: 'ellipsis' });
  }
  
  // Last page (if more than one page exists)
  if (totalPages > 1) {
    items.push({
      type: 'page',
      number: totalPages,
      url: `/page/${totalPages}`,
      active: currentPage === totalPages
    });
  }
  
  return items;
}

const paginationItems = generatePaginationItems(page.currentPage, page.lastPage);
---

<Layout title="Blog - Page {page.currentPage} - Fluxx by Digitalbox">
  <div id="main">
    <!-- Regular Posts -->
    <section class="posts">
      {page.data.map((post) => (
        <article>
          <header>
            <span class="date">{post.data.date}</span>
            <h2><a href={`/blog/${post.slug}`}>{post.data.title}</a></h2>
          </header>
          <a href={`/blog/${post.slug}`} class="image fit">
            <img src={post.data.featuredImage} alt={post.data.title} />
          </a>
          <p>{post.data.description}</p>
          <ul class="actions special">
            <li><a href={`/blog/${post.slug}`} class="button">Full Story</a></li>
          </ul>
        </article>
      ))}
    </section>

    <!-- Pagination -->
    <footer>
      <div class="pagination">
        {page.url.prev ? (
          <a href={page.url.prev === "/page/1" ? "/" : page.url.prev} class="previous">Prev</a>
        ) : (
          <span class="previous disabled">Prev</span>
        )}
        
        {paginationItems.map(item => {
          if (item.type === 'ellipsis') {
            return <span class="extra">&hellip;</span>;
          } else {
            return (
              <a href={item.url} class={`page ${item.active ? 'active' : ''}`}>
                {item.number}
              </a>
            );
          }
        })}
        
        {page.url.next ? (
          <a href={page.url.next} class="next">Next</a>
        ) : (
          <span class="next disabled">Next</span>
        )}
      </div>
    </footer>
  </div>
</Layout>